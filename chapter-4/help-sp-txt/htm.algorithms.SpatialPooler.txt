Help on class SpatialPooler in htm.algorithms:

htm.algorithms.SpatialPooler = class SpatialPooler(pybind11_builtins.pybind11_object)
 |  Method resolution order:
 |      SpatialPooler
 |      pybind11_builtins.pybind11_object
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getstate__(...)
 |      __getstate__(self: htm.bindings.algorithms.SpatialPooler) -> bytes
 |  
 |  __init__(...)
 |      __init__(self: htm.bindings.algorithms.SpatialPooler, inputDimensions: List[int] = [32, 32], columnDimensions: List[int] = [64, 64], potentialRadius: int = 16, potentialPct: float = 0.5, globalInhibition: bool = False, localAreaDensity: float = 0.019999999552965164, numActiveColumnsPerInhArea: int = 0, stimulusThreshold: int = 0, synPermInactiveDec: float = 0.01, synPermActiveInc: float = 0.1, synPermConnected: float = 0.1, minPctOverlapDutyCycle: float = 0.001, dutyCyclePeriod: int = 1000, boostStrength: float = 0.0, seed: int = 1, spVerbosity: int = 0, wrapAround: bool = True) -> None
 |      
 |      
 |      Argument inputDimensions A list of integers representing the
 |              dimensions of the input vector. Format is [height, width,
 |              depth, ...], where each value represents the size of the
 |              dimension. For a topology of one dimensions with 100 inputs
 |              use [100]. For a two dimensional topology of 10x5
 |              use [10,5].
 |      
 |      Argument columnDimensions A list of integers representing the
 |              dimensions of the columns in the region. Format is [height,
 |              width, depth, ...], where each value represents the size of
 |              the dimension. For a topology of one dimensions with 2000
 |              columns use 2000, or [2000]. For a three dimensional
 |              topology of 32x64x16 use [32, 64, 16].
 |      
 |      Argument potentialRadius This parameter determines the extent of the
 |              input that each column can potentially be connected to. This
 |              can be thought of as the input bits that are visible to each
 |              column, or a 'receptive field' of the field of vision. A large
 |              enough value will result in global coverage, meaning
 |              that each column can potentially be connected to every input
 |              bit. This parameter defines a square (or hyper square) area: a
 |              column will have a max square potential pool with sides of
 |              length (2 * potentialRadius + 1).
 |      
 |      Argument potentialPct The percent of the inputs, within a column's
 |              potential radius, that a column can be connected to. If set to
 |              1, the column will be connected to every input within its
 |              potential radius. This parameter is used to give each column a
 |              unique potential pool when a large potentialRadius causes
 |              overlap between the columns. At initialization time we choose
 |              ((2*potentialRadius + 1)^(# inputDimensions) * potentialPct)
 |              input bits to comprise the column's potential pool.
 |      
 |      Argument globalInhibition If true, then during inhibition phase the
 |              winning columns are selected as the most active columns from the
 |              region as a whole. Otherwise, the winning columns are selected
 |              with respect to their local neighborhoods. Global inhibition
 |              boosts performance significantly but there is no topology at the
 |              output.
 |      
 |      Argument localAreaDensity The desired density of active columns within
 |              a local inhibition area (the size of which is set by the
 |              internally calculated inhibitionRadius, which is in turn
 |              determined from the average size of the connected potential
 |              pools of all columns). The inhibition logic will insure that at
 |              most N columns remain ON within a local inhibition area, where
 |              N = localAreaDensity * (total number of columns in inhibition
 |              area). 
 |          If localAreaDensity is set to 0, 
 |          output sparsity will be determined by the numActivePerInhArea.
 |      
 |      Argument numActiveColumnsPerInhArea An alternate way to control the sparsity of
 |              active columns. When numActivePerInhArea > 0, the inhibition logic will insure that
 |              at most 'numActivePerInhArea' columns remain ON within a local
 |              inhibition area (the size of which is set by the internally
 |              calculated inhibitionRadius). When using this method, as columns
 |              learn and grow their effective receptive fields, the
 |              inhibitionRadius will grow, and hence the net density of the
 |              active columns will *decrease*. This is in contrast to the
 |              localAreaDensity method, which keeps the density of active
 |              columns the same regardless of the size of their receptive
 |              fields.
 |          If numActivePerInhArea is specified then it overrides localAreaDensity..
 |      
 |      Argument stimulusThreshold This is a number specifying the minimum
 |              number of synapses that must be active in order for a column to
 |              turn ON. The purpose of this is to prevent noisy input from
 |              activating columns.
 |      
 |      Argument synPermInactiveDec The amount by which the permanence of an
 |              inactive synapse is decremented in each learning step.
 |      
 |      Argument synPermActiveInc The amount by which the permanence of an
 |              active synapse is incremented in each round.
 |      
 |      Argument synPermConnected The default connected threshold. Any synapse
 |              whose permanence value is above the connected threshold is
 |              a "connected synapse", meaning it can contribute to
 |              the cell's firing.
 |      
 |      Argument minPctOverlapDutyCycle A number between 0 and 1.0, used to set
 |              a floor on how often a column should have at least
 |              stimulusThreshold active inputs. Periodically, each column looks
 |              at the overlap duty cycle of all other column within its
 |              inhibition radius and sets its own internal minimal acceptable
 |              duty cycle to: minPctDutyCycleBeforeInh * max(other columns'
 |              duty cycles). On each iteration, any column whose overlap duty
 |              cycle falls below this computed value will get all of its
 |              permanence values boosted up by synPermActiveInc. Raising all
 |              permanences in response to a sub-par duty cycle before
 |              inhibition allows a cell to search for new inputs when either
 |              its previously learned inputs are no longer ever active, or when
 |              the vast majority of them have been "hijacked" by other columns.
 |      
 |      Argument dutyCyclePeriod The period used to calculate duty cycles.
 |              Higher values make it take longer to respond to changes in
 |              boost. Shorter values make it potentially more unstable and
 |              likely to oscillate.
 |      
 |      Argument boostStrength A number greater or equal than 0, used to
 |              control boosting strength. No boosting is applied if it is set to 0.
 |              The strength of boosting increases as a function of boostStrength.
 |              Boosting encourages columns to have similar activeDutyCycles as their
 |              neighbors, which will lead to more efficient use of columns. However,
 |              too much boosting may also lead to instability of SP outputs.
 |      
 |      
 |      Argument seed Seed for our random number generator. If seed is < 0
 |              a randomly generated seed is used. The behavior of the spatial
 |              pooler is deterministic once the seed is set.
 |      
 |      Argument spVerbosity spVerbosity level: 0, 1, 2, or 3
 |      
 |      Argument wrapAround boolean value that determines whether or not inputs
 |              at the beginning and end of an input dimension are considered
 |              neighbors for the purpose of mapping inputs to columns.
 |  
 |  __setstate__(...)
 |      __setstate__(self: htm.bindings.algorithms.SpatialPooler, arg0: bytes) -> None
 |  
 |  __str__(...)
 |      __str__(self: htm.bindings.algorithms.SpatialPooler) -> str
 |  
 |  compute(...)
 |      compute(self: htm.bindings.algorithms.SpatialPooler, input: htm::SparseDistributedRepresentation, learn: bool = True, output: htm::SparseDistributedRepresentation) -> numpy.ndarray[uint16]
 |      
 |      
 |      This is the main workhorse method of the SpatialPooler class. This method
 |      takes an input SDR and computes the set of output active columns. If 'learn' is
 |      set to True, this method also performs learning.
 |      
 |      Argument input An SDR that comprises the input to the spatial pooler.  The size
 |              of the SDR must match total number of input bits implied by the
 |              constructor (also returned by the method getNumInputs).
 |      
 |      Argument learn A boolean value indicating whether learning should be
 |              performed. Learning entails updating the permanence values of
 |              the synapses, duty cycles, etc. Learning is typically on but
 |              setting learning to 'off' is useful for analyzing the current
 |              state of the SP. For example, you might want to feed in various
 |              inputs and examine the resulting SDR's. Note that if learning
 |              is off, boosting is turned off and columns that have never won
 |              will be removed from activeVector.  TODO: we may want to keep
 |              boosting on even when learning is off.
 |      
 |      Argument output An SDR representing the winning columns after
 |              inhibition. The size of the SDR is equal to the number of
 |              columns (also returned by the method getNumColumns).
 |  
 |  getActiveDutyCycles(...)
 |      getActiveDutyCycles(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  getBoostFactors(...)
 |      getBoostFactors(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  getBoostStrength(...)
 |      getBoostStrength(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getBoostedOverlaps(...)
 |      getBoostedOverlaps(self: htm.bindings.algorithms.SpatialPooler) -> numpy.ndarray[float32]
 |  
 |  getColumnDimensions(...)
 |      getColumnDimensions(self: htm.bindings.algorithms.SpatialPooler) -> List[int]
 |  
 |  getConnectedCounts(...)
 |      getConnectedCounts(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  getDutyCyclePeriod(...)
 |      getDutyCyclePeriod(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getGlobalInhibition(...)
 |      getGlobalInhibition(self: htm.bindings.algorithms.SpatialPooler) -> bool
 |  
 |  getInhibitionRadius(...)
 |      getInhibitionRadius(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getInputDimensions(...)
 |      getInputDimensions(self: htm.bindings.algorithms.SpatialPooler) -> List[int]
 |  
 |  getIterationLearnNum(...)
 |      getIterationLearnNum(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. getIterationLearnNum(self: htm.bindings.algorithms.SpatialPooler) -> int
 |      
 |      2. getIterationLearnNum(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getIterationNum(...)
 |      getIterationNum(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getLocalAreaDensity(...)
 |      getLocalAreaDensity(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getMinOverlapDutyCycles(...)
 |      getMinOverlapDutyCycles(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  getMinPctOverlapDutyCycles(...)
 |      getMinPctOverlapDutyCycles(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getNumActiveColumnsPerInhArea(...)
 |      getNumActiveColumnsPerInhArea(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getNumColumns(...)
 |      getNumColumns(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getNumInputs(...)
 |      getNumInputs(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getOverlapDutyCycles(...)
 |      getOverlapDutyCycles(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  getPermanence(...)
 |      getPermanence(self: htm.bindings.algorithms.SpatialPooler, column: int, x: array, threshold: float = 0.0) -> List[float]
 |  
 |  getPotential(...)
 |      getPotential(self: htm.bindings.algorithms.SpatialPooler, arg0: int, arg1: array) -> None
 |  
 |  getPotentialPct(...)
 |      getPotentialPct(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getPotentialRadius(...)
 |      getPotentialRadius(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getSpVerbosity(...)
 |      getSpVerbosity(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getStimulusThreshold(...)
 |      getStimulusThreshold(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getSynPermActiveInc(...)
 |      getSynPermActiveInc(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getSynPermBelowStimulusInc(...)
 |      getSynPermBelowStimulusInc(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getSynPermConnected(...)
 |      getSynPermConnected(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getSynPermInactiveDec(...)
 |      getSynPermInactiveDec(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getSynPermMax(...)
 |      getSynPermMax(self: htm.bindings.algorithms.SpatialPooler) -> float
 |  
 |  getUpdatePeriod(...)
 |      getUpdatePeriod(self: htm.bindings.algorithms.SpatialPooler) -> int
 |  
 |  getWrapAround(...)
 |      getWrapAround(self: htm.bindings.algorithms.SpatialPooler) -> bool
 |  
 |  inhibitColumns_(...)
 |      inhibitColumns_(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> numpy.ndarray[uint32]
 |  
 |  loadFromFile(...)
 |      loadFromFile(self: htm.bindings.algorithms.SpatialPooler, arg0: str) -> None
 |  
 |  loadFromString(...)
 |      loadFromString(self: htm.bindings.algorithms.SpatialPooler, arg0: str) -> None
 |  
 |  saveToFile(...)
 |      saveToFile(self: htm.bindings.algorithms.SpatialPooler, arg0: str) -> None
 |  
 |  setActiveDutyCycles(...)
 |      setActiveDutyCycles(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  setBoostFactors(...)
 |      setBoostFactors(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  setBoostStrength(...)
 |      setBoostStrength(self: htm.bindings.algorithms.SpatialPooler, arg0: float) -> None
 |  
 |  setDutyCyclePeriod(...)
 |      setDutyCyclePeriod(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setGlobalInhibition(...)
 |      setGlobalInhibition(self: htm.bindings.algorithms.SpatialPooler, arg0: bool) -> None
 |  
 |  setInhibitionRadius(...)
 |      setInhibitionRadius(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setIterationLearnNum(...)
 |      setIterationLearnNum(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setIterationNum(...)
 |      setIterationNum(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setLocalAreaDensity(...)
 |      setLocalAreaDensity(self: htm.bindings.algorithms.SpatialPooler, arg0: float) -> None
 |  
 |  setMinOverlapDutyCycles(...)
 |      setMinOverlapDutyCycles(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  setMinPctOverlapDutyCycles(...)
 |      setMinPctOverlapDutyCycles(self: htm.bindings.algorithms.SpatialPooler, arg0: float) -> None
 |  
 |  setNumActiveColumnsPerInhArea(...)
 |      setNumActiveColumnsPerInhArea(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setOverlapDutyCycles(...)
 |      setOverlapDutyCycles(self: htm.bindings.algorithms.SpatialPooler, arg0: array) -> None
 |  
 |  setPermanence(...)
 |      setPermanence(self: htm.bindings.algorithms.SpatialPooler, arg0: int, arg1: array) -> None
 |  
 |  setPotential(...)
 |      setPotential(self: htm.bindings.algorithms.SpatialPooler, arg0: int, arg1: array) -> None
 |  
 |  setPotentialPct(...)
 |      setPotentialPct(self: htm.bindings.algorithms.SpatialPooler, arg0: float) -> None
 |  
 |  setPotentialRadius(...)
 |      setPotentialRadius(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setSpVerbosity(...)
 |      setSpVerbosity(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setStimulusThreshold(...)
 |      setStimulusThreshold(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setSynPermActiveInc(...)
 |      setSynPermActiveInc(self: htm.bindings.algorithms.SpatialPooler, arg0: float) -> None
 |  
 |  setSynPermBelowStimulusInc(...)
 |      setSynPermBelowStimulusInc(self: htm.bindings.algorithms.SpatialPooler, arg0: float) -> None
 |  
 |  setSynPermInactiveDec(...)
 |      setSynPermInactiveDec(self: htm.bindings.algorithms.SpatialPooler, arg0: float) -> None
 |  
 |  setUpdatePeriod(...)
 |      setUpdatePeriod(self: htm.bindings.algorithms.SpatialPooler, arg0: int) -> None
 |  
 |  setWrapAround(...)
 |      setWrapAround(self: htm.bindings.algorithms.SpatialPooler, arg0: bool) -> None
 |  
 |  writeToString(...)
 |      writeToString(self: htm.bindings.algorithms.SpatialPooler) -> str
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  connections
 |      SP's internal connections (read-only) Warning: the Connections is subject to change.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pybind11_builtins.pybind11_object:
 |  
 |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
 |      Create and return a new object.  See help(type) for accurate signature.
