Help on class TemporalMemory in htm.algorithms:

htm.algorithms.TemporalMemory = class TemporalMemory(pybind11_builtins.pybind11_object)
 |  Temporal Memory implementation in C++.
 |  
 |  Example usage:
 |      TODO
 |  
 |  Method resolution order:
 |      TemporalMemory
 |      pybind11_builtins.pybind11_object
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getstate__(...)
 |      __getstate__(self: htm.bindings.algorithms.TemporalMemory) -> bytes
 |  
 |  __init__(...)
 |      __init__(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. __init__(self: htm.bindings.algorithms.TemporalMemory) -> None
 |      
 |      2. __init__(self: htm.bindings.algorithms.TemporalMemory, columnDimensions: List[int], cellsPerColumn: int = 32, activationThreshold: int = 13, initialPermanence: float = 0.21, connectedPermanence: float = 0.5, minThreshold: int = 10, maxNewSynapseCount: int = 20, permanenceIncrement: float = 0.1, permanenceDecrement: float = 0.1, predictedSegmentDecrement: float = 0.0, seed: int = 42, maxSegmentsPerCell: int = 255, maxSynapsesPerSegment: int = 255, checkInputs: bool = True, externalPredictiveInputs: int = 0, anomalyMode: htm.bindings.algorithms.ANMode = ANMode.RAW) -> None
 |      
 |      Initialize the temporal memory (TM) using the given parameters.
 |      
 |      Argument columnDimensions
 |          Dimensions of the mini-column space
 |      
 |      Argument cellsPerColumn
 |         Number of cells per mini-column
 |      
 |      Argument activationThreshold
 |          If the number of active connected synapses on a segment is at least
 |          this threshold, the segment is actived.
 |      
 |      Argument initialPermanence
 |          Initial permanence of a new synapse.
 |      
 |      Argument connectedPermanence
 |          If the permanence value for a synapse is greater than this value, then it
 |          is connected.
 |      
 |      Argument minThreshold
 |          If the number of potential synapses active on a segment is at least
 |          this threshold, it is said to be "matching" and is eligible for
 |          learning.
 |      
 |      Argument maxNewSynapseCount
 |          The maximum number of synapses added to a segment during learning.
 |      
 |      Argument permanenceIncrement
 |          Amount by which permanences of synapses are incremented during learning.
 |      
 |      Argument permanenceDecrement
 |          Amount by which permanences of synapses are decremented during learning.
 |      
 |      Argument predictedSegmentDecrement
 |          Amount by which segments are punished for incorrect predictions.
 |          A good value is just a bit larger than (the column-level sparsity *
 |          permanenceIncrement). So, if column-level sparsity is 2% and
 |          permanenceIncrement is 0.01, this parameter should be something like 4% *
 |          0.01 = 0.0004
 |      
 |      Argument seed
 |          Seed for the random number generator.
 |      
 |      Argument maxSegmentsPerCell
 |          The maximum number of segments per cell.
 |      
 |      Argument maxSynapsesPerSegment
 |          The maximum number of synapses per segment.
 |      
 |      Argument checkInputs
 |          Whether to check that the activeColumns are sorted without
 |          duplicates. Disable this for a small speed boost.
 |      
 |      Argument externalPredictiveInputs
 |          Number of external predictive inputs.  These values are not related to this
 |          TM, they represent input from a different region.  This TM will form
 |          synapses with these inputs in addition to the cells which are part of this
 |          TemporalMemory.  If this is given (and greater than 0) then the active
 |          cells and winner cells of these external inputs must be given to methods
 |          TM.compute and TM.activateDendrites
 |      
 |      Argument anomalyMode (optional, default ANMode::RAW) selects mode for `TM.anomaly`.
 |          Options are ANMode {DISABLED, RAW, LIKELIHOOD, LOGLIKELIHOOD}
 |  
 |  __setstate__(...)
 |      __setstate__(self: htm.bindings.algorithms.TemporalMemory, arg0: bytes) -> None
 |  
 |  __str__(...)
 |      __str__(self: htm.bindings.algorithms.TemporalMemory) -> str
 |  
 |  activateCells(...)
 |      activateCells(self: htm.bindings.algorithms.TemporalMemory, activeColumns: htm::SparseDistributedRepresentation, learn: bool = True) -> None
 |      
 |      Calculate the active cells, using the current active columns and
 |      dendrite segments.  Grow and reinforce synapses.
 |  
 |  activateDendrites(...)
 |      activateDendrites(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. activateDendrites(self: htm.bindings.algorithms.TemporalMemory, learn: bool) -> None
 |      
 |      2. activateDendrites(self: htm.bindings.algorithms.TemporalMemory, learn: bool, externalPredictiveInputsActive: htm::SparseDistributedRepresentation, externalPredictiveInputsWinners: htm::SparseDistributedRepresentation) -> None
 |      
 |      Calculate dendrite segment activity, using the current active cells.  Call
 |      this method before calling getPredictiveCells, getActiveSegments, or
 |      getMatchingSegments.  In each time step, only the first call to this
 |      method has an effect, subsequent calls assume that the prior results are
 |      still valid.
 |      
 |      Argument learn
 |          If true, segment activations will be recorded. This information is
 |          used during segment cleanup.
 |      
 |      Argument externalPredictiveInputsActive
 |          (optional) SDR of active external predictive inputs.
 |      
 |      Argument externalPredictiveInputsWinners
 |          (optional) SDR of winning external predictive inputs.  When learning, only
 |          these inputs are considered active.
 |          externalPredictiveInputsWinners must be a subset of externalPredictiveInputsActive.
 |      
 |      See TM.compute() for details of the parameters.
 |  
 |  cellsForColumn(...)
 |      cellsForColumn(self: htm.bindings.algorithms.TemporalMemory, arg0: int) -> numpy.ndarray[uint32]
 |      
 |      Returns list of indices of cells that belong to a mini-column.
 |      
 |      Argument column is sparse index of a mini-column.
 |  
 |  cellsToColumns(...)
 |      cellsToColumns(self: htm.bindings.algorithms.TemporalMemory, arg0: htm::SparseDistributedRepresentation) -> htm::SparseDistributedRepresentation
 |      
 |      Converts cells SDR to corresponding columns SDR.
 |      
 |      Argument cells
 |              SDR with bits that represents cells.
 |      
 |      Returns SDR with bits that represents columns.
 |  
 |  columnForCell(...)
 |      columnForCell(self: htm.bindings.algorithms.TemporalMemory, arg0: int) -> int
 |      
 |      Returns the index of the mini-column that a cell belongs to.
 |      
 |      Argument (int) cell index
 |      Returns (int) mini-column index
 |  
 |  compute(...)
 |      compute(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. compute(self: htm.bindings.algorithms.TemporalMemory, activeColumns: htm::SparseDistributedRepresentation, learn: bool = True) -> None
 |      
 |      2. compute(self: htm.bindings.algorithms.TemporalMemory, activeColumns: htm::SparseDistributedRepresentation, learn: bool = True, externalPredictiveInputsActive: htm::SparseDistributedRepresentation, externalPredictiveInputsWinners: htm::SparseDistributedRepresentation) -> None
 |      
 |      Perform one time step of the Temporal Memory algorithm.
 |      
 |      This method calls activateDendrites, then calls activateCells. Using
 |      the TemporalMemory via its compute method ensures that you'll always
 |      be able to call getActiveCells at the end of the time step.
 |      
 |      Argument activeColumns
 |          SDR of active mini-columns.
 |      
 |      Argument learn
 |          Whether or not learning is enabled.
 |      
 |      Argument externalPredictiveInputsActive
 |          (optional) SDR of active external predictive inputs.  
 |          TM must be set up with the 'externalPredictiveInputs' constructor parameter for this use.
 |      
 |      Argument externalPredictiveInputsWinners
 |          (optional) SDR of winning external predictive inputs.  When learning, only these
 |          inputs are considered active.  
 |          externalPredictiveInputsWinners must be a subset of externalPredictiveInputsActive.
 |  
 |  createSegment(...)
 |      createSegment(self: htm.bindings.algorithms.TemporalMemory, arg0: int) -> int
 |      
 |      Create a segment on the specified cell. This method calls
 |      createSegment on the underlying connections, and it does some extra
 |      bookkeeping. Unit tests should call this method, and not
 |      connections.createSegment().
 |      
 |      Argument cell
 |          Index of Cell to add a segment to.
 |      
 |      Returns the created segment (index handle).
 |  
 |  getActiveCells(...)
 |      getActiveCells(self: htm.bindings.algorithms.TemporalMemory) -> htm::SparseDistributedRepresentation
 |  
 |  getActiveSegments(...)
 |      getActiveSegments(self: htm.bindings.algorithms.TemporalMemory) -> List[int]
 |  
 |  getMatchingSegments(...)
 |      getMatchingSegments(self: htm.bindings.algorithms.TemporalMemory) -> List[int]
 |  
 |  getPredictiveCells(...)
 |      getPredictiveCells(self: htm.bindings.algorithms.TemporalMemory) -> htm::SparseDistributedRepresentation
 |  
 |  getWinnerCells(...)
 |      getWinnerCells(self: htm.bindings.algorithms.TemporalMemory) -> htm::SparseDistributedRepresentation
 |  
 |  loadFromFile(...)
 |      loadFromFile(self: htm.bindings.algorithms.TemporalMemory, arg0: str) -> None
 |  
 |  loadFromString(...)
 |      loadFromString(self: htm.bindings.algorithms.TemporalMemory, arg0: str) -> None
 |  
 |  numberOfCells(...)
 |      numberOfCells(self: htm.bindings.algorithms.TemporalMemory) -> int
 |      
 |      Returns the number of cells in this TemporalMemory.
 |  
 |  numberOfColumns(...)
 |      numberOfColumns(self: htm.bindings.algorithms.TemporalMemory) -> int
 |      
 |      Returns the total number of mini-columns.
 |  
 |  printParameters(...)
 |      printParameters(self: htm.bindings.algorithms.TemporalMemory) -> None
 |  
 |  reset(...)
 |      reset(self: htm.bindings.algorithms.TemporalMemory) -> None
 |      
 |      Indicates the start of a new sequence.
 |      Resets sequence state of the TM.
 |  
 |  saveToFile(...)
 |      saveToFile(self: htm.bindings.algorithms.TemporalMemory, arg0: str) -> None
 |  
 |  writeToString(...)
 |      writeToString(self: htm.bindings.algorithms.TemporalMemory) -> str
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  anomaly
 |      Anomaly score updated with each TM::compute() call.
 |  
 |  connections
 |      Internal Connections object. Danger!
 |      Modifying this may detrimentally effect the TM.
 |      The Connections class API is subject to change.
 |  
 |  externalPredictiveInputs
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pybind11_builtins.pybind11_object:
 |  
 |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
 |      Create and return a new object.  See help(type) for accurate signature.

TemporalMemory
__doc__="""
このプログラムでは、以下のようなデモを行い