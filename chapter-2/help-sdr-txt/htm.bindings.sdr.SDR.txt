Help on class SDR in htm.bindings.sdr:

htm.bindings.sdr.SDR = class SDR(pybind11_builtins.pybind11_object)
 |  Sparse Distributed Representation
 |  
 |  This class manages the specification and momentary value of a Sparse Distributed
 |  Representation (SDR).  An SDR is a group of boolean values which represent the
 |  state of a group of neurons or their associated processes.
 |  
 |  SDR's have three commonly used data formats which are:
 |  *   dense
 |  *   sparse
 |  *   coordinates
 |  The SDR class has three magic properties, one for each of these data formats.
 |  These properties are the primary way of accessing the SDR's data.  When these
 |  properties are read from, the data is automatically converted to the requested
 |  format and is cached so getting a value in one format many times incurs no extra
 |  performance cost.  Assigning to the SDR via any one of these properties clears
 |  the cached values and causes them to be recomputed as needed.
 |  
 |  Example usage:
 |      # Make an SDR with 9 values, arranged in a (3 x 3) grid.
 |      X = SDR(dimensions = (3, 3))
 |  
 |      # These three statements are equivalent.
 |      X.dense  = [[0, 1, 0],
 |                  [0, 1, 0],
 |                  [0, 0, 1]]
 |      X.sparse = [ 1, 4, 8 ]
 |      X.coordinates = [[0, 1, 2], [1, 1, 2]]
 |  
 |      # Access data in any format, SDR will automatically convert data formats,
 |      # even if it was not the format used by the most recent assignment to the
 |      # SDR.
 |      X.dense  -> [[ 0, 1, 0 ],
 |                   [ 0, 1, 0 ],
 |                   [ 0, 0, 1 ]]
 |      x.sparse -> [ 1, 4, 8 ]
 |      X.coordinates -> [[ 0, 1, 2 ], [1, 1, 2 ]]
 |  
 |      # Data format conversions are cached, and when an SDR value changes the
 |      # cache is cleared.
 |      X.sparse = [1, 2, 3] # Assign new data to the SDR, clearing the cache.
 |      X.dense     # This line will convert formats.
 |      X.dense     # This line will resuse the result of the previous line
 |  
 |  Assigning a value to the SDR requires copying the data from Python into C++. To
 |  avoid this copy operation: modify sdr.dense inplace, and assign it to itself.
 |  This class will detect that it's being given it's own data and will omit the
 |  copy operation.
 |  
 |  Example Usage of In-Place Assignment:
 |      X    = SDR((1000, 1000))   # Initial value is all zeros
 |      data = X.dense
 |      data[  0,   4] = 1
 |      data[444, 444] = 1
 |      X.dense = data
 |      X.sparse -> [ 4, 444444 ]
 |  
 |  Data Validity Warning:  After assigning a new value to the SDR, all existing
 |  numpy arrays of data are invalid.  In order to get the latest copy of the data,
 |  re-access the data from the SDR.  Examples:
 |      A = SDR( dimensions )
 |      out_of_date = A.dense
 |      A.sparse = []
 |      # The variable "out_of_date" is now liable to be overwritten.
 |      A.dense = out_of_date   # This does not work, since the data is invalid.
 |  
 |  Method resolution order:
 |      SDR
 |      pybind11_builtins.pybind11_object
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __eq__(...)
 |      __eq__(self: htm.bindings.sdr.SDR, arg0: htm.bindings.sdr.SDR) -> bool
 |  
 |  __getstate__(...)
 |      __getstate__(self: htm.bindings.sdr.SDR) -> bytes
 |  
 |  __init__(...)
 |      __init__(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. __init__(self: htm.bindings.sdr.SDR, dimensions: List[int]) -> None
 |      
 |      Create an SDR object.  The initial value is all zeros.
 |      
 |      Argument dimensions is a list of dimension sizes, defining the shape of the SDR.
 |      The product of the dimensions must be greater than zero.
 |      
 |      2. __init__(self: htm.bindings.sdr.SDR, dimensions: int) -> None
 |      
 |      Create an SDR object.  The initial value is all zeros.
 |      
 |      Argument dimensions is a single integer dimension size, defining a 1-dimensional
 |      SDR.  Must be greater than zero.
 |      
 |      3. __init__(self: htm.bindings.sdr.SDR, sdr: htm.bindings.sdr.SDR) -> None
 |      
 |      Initialize this SDR as a deep copy of the given SDR.  This SDR and the given
 |      SDR will have no shared data and they can be modified without affecting each
 |      other.
 |  
 |  __ne__(...)
 |      __ne__(self: htm.bindings.sdr.SDR, arg0: htm.bindings.sdr.SDR) -> bool
 |  
 |  __setstate__(...)
 |      __setstate__(self: htm.bindings.sdr.SDR, arg0: bytes) -> None
 |  
 |  __str__(...)
 |      __str__(self: htm.bindings.sdr.SDR) -> object
 |  
 |  addNoise(...)
 |      addNoise(self: htm.bindings.sdr.SDR, fractionNoise: float, seed: int = 0) -> htm.bindings.sdr.SDR
 |      
 |      Modify the SDR by moving a fraction of the active bits to different
 |      locations.  This method does not change the sparsity of the SDR, it moves
 |      the locations of the true values.  The resulting SDR has a controlled
 |      amount of overlap with the original.
 |      
 |      Argument fractionNoise is the fraction of active bits to swap out.  The original
 |      and resulting SDRs have the following relationship:
 |          originalSDR.getOverlap( newSDR ) / sparsity == 1 - fractionNoise
 |      
 |      Optional argument seed is used for the random number generator.  Seed 0 is
 |      special, it is replaced with the system time.  The default seed is 0.
 |  
 |  concatenate(...)
 |      concatenate(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. concatenate(self: htm.bindings.sdr.SDR, input1: htm.bindings.sdr.SDR, input2: htm.bindings.sdr.SDR, axis: int = 0) -> htm.bindings.sdr.SDR
 |      
 |      Concatenates SDRs and stores the result in this SDR.
 |      
 |      This method has two overloads:
 |          1) Accepts two SDRs, for convenience.
 |          2) Accepts a list of SDRs, must contain at least two SDRs, can
 |             contain as many SDRs as needed.
 |      
 |      Argument axis: This can concatenate along any axis, as long as the
 |      result has the same dimensions as this SDR.  The default axis is 0.
 |      
 |      The output is stored in this SDR.  This method modifies this SDR
 |      and discards its current value!
 |      
 |      Example Usage:
 |          A = SDR( 10 )
 |          B = SDR( 10 )
 |          C = SDR( 20 )
 |          A.sparse = [0, 1, 2]
 |          B.sparse = [0, 1, 2]
 |          C.concatenate( A, B )
 |          C.sparse == [0, 1, 2, 10, 11, 12]
 |      
 |      
 |      2. concatenate(self: htm.bindings.sdr.SDR, inputs: List[htm.bindings.sdr.SDR], axis: int = 0) -> htm.bindings.sdr.SDR
 |  
 |  flatten(...)
 |      flatten(self: htm.bindings.sdr.SDR) -> htm.bindings.sdr.SDR
 |      
 |      Change the dimensions of the SDR into one big dimension.
 |  
 |  getOverlap(...)
 |      getOverlap(self: htm.bindings.sdr.SDR, arg0: htm.bindings.sdr.SDR) -> int
 |      
 |      Calculates the number of true bits which both SDRs have in common.
 |  
 |  getSparsity(...)
 |      getSparsity(self: htm.bindings.sdr.SDR) -> float
 |      
 |      Calculates the sparsity of the SDR, which is the fraction of bits which are
 |      true out of the total number of bits in the SDR.
 |      I.E.  sparsity = sdr.getSum() / sdr.size
 |  
 |  getSum(...)
 |      getSum(self: htm.bindings.sdr.SDR) -> int
 |      
 |      Calculates the number of true values in the SDR.
 |  
 |  intersection(...)
 |      intersection(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. intersection(self: htm.bindings.sdr.SDR, arg0: htm.bindings.sdr.SDR, arg1: htm.bindings.sdr.SDR) -> htm.bindings.sdr.SDR
 |      
 |      This method calculates the set intersection of the active bits in each input
 |      SDR.
 |      
 |      This method has two overloads:
 |          1) Accepts two SDRs, for convenience.
 |          2) Accepts a list of SDRs, must contain at least two SDRs, can contain as
 |             many SDRs as needed.
 |      
 |      In both cases the output is stored in this SDR.  This method modifies this SDR
 |      and discards its current value!
 |      
 |      Example Usage:
 |          A = SDR( 10 )
 |          B = SDR( 10 )
 |          X = SDR( 10 )
 |          A.sparse = [0, 1, 2, 3]
 |          B.sparse =       [2, 3, 4, 5]
 |          X.intersection( A, B )
 |          X.sparse -> [2, 3]
 |      
 |      
 |      2. intersection(self: htm.bindings.sdr.SDR, arg0: List[htm.bindings.sdr.SDR]) -> htm.bindings.sdr.SDR
 |  
 |  killCells(...)
 |      killCells(self: htm.bindings.sdr.SDR, fraction: float, seed: int = 0) -> htm.bindings.sdr.SDR
 |      
 |      Modify the SDR by setting a fraction of the bits to zero.
 |      
 |      Argument fraction must be between 0 and 1 (inclusive).  This fraction of the
 |      cells in the SDR will be set to zero, regardless of their current state.
 |      
 |      Argument seed is for a random number generator.  If not given, this uses the
 |      magic seed 0.  Use the same seed to consistently kill the same cells.
 |  
 |  randomize(...)
 |      randomize(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. randomize(self: htm.bindings.sdr.SDR, sparsity: float, seed: int = 0) -> htm.bindings.sdr.SDR
 |      
 |      Make a random SDR, overwriting the current value of the SDR.  The result has
 |      uniformly random activations.
 |      
 |      Argument sparsity is the fraction of bits to set to true.  After calling this
 |      method sdr.getSparsity() will return this sparsity, rounded to the nearest
 |      fraction of self.size.
 |      
 |      Optional argument seed is used for the random number generator.  Seed 0 is
 |      special, it is replaced with the system time  The default seed is 0.
 |      
 |      2. randomize(self: htm.bindings.sdr.SDR, sparsity: float, rng: htm.bindings.math.Random) -> htm.bindings.sdr.SDR
 |      
 |      This overload accepts Random Number Generators (RNG) intead of a random seed.
 |      RNGs must be instances of "htm.bindings.math.Random".
 |  
 |  reshape(...)
 |      reshape(self: htm.bindings.sdr.SDR, arg0: List[int]) -> htm.bindings.sdr.SDR
 |      
 |      Change the dimensions of the SDR.  The total size must not change.
 |  
 |  setSDR(...)
 |      setSDR(self: htm.bindings.sdr.SDR, arg0: htm.bindings.sdr.SDR) -> htm.bindings.sdr.SDR
 |      
 |      Deep Copy the given SDR to this SDR.  This overwrites the current value of this
 |      SDR.  This SDR and the given SDR will have no shared data and they can be
 |      modified without affecting each other.
 |  
 |  union(...)
 |      union(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. union(self: htm.bindings.sdr.SDR, arg0: htm.bindings.sdr.SDR, arg1: htm.bindings.sdr.SDR) -> htm.bindings.sdr.SDR
 |      
 |      This method calculates the set union of the active bits in each input SDR.
 |      
 |      The output is stored in this SDR.  This method discards the SDRs current value!
 |      
 |      Example Usage:
 |          A = SDR( 10 )
 |          B = SDR( 10 )
 |          U = SDR( 10 )
 |          A.sparse = [0, 1, 2, 3]
 |          B.sparse =       [2, 3, 4, 5]
 |          U.union( A, B )
 |          U.sparse -> [0, 1, 2, 3, 4, 5]
 |      
 |      
 |      2. union(self: htm.bindings.sdr.SDR, arg0: List[htm.bindings.sdr.SDR]) -> htm.bindings.sdr.SDR
 |  
 |  zero(...)
 |      zero(self: htm.bindings.sdr.SDR) -> htm.bindings.sdr.SDR
 |      
 |      Set all of the values in the SDR to false.  This method overwrites the SDRs
 |      current value.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  coordinates
 |      List of numpy arrays, containing the coordinates of only the true values in
 |      the SDR.  This is a list of lists: the outter list contains an entry for each
 |      dimension in the SDR. The inner lists contain the coordinates of each true bit.
 |      The inner lists run in parallel. This format is useful because it contains the
 |      location of each true bit inside of the SDR's dimensional space.
 |      
 |      Coordinate data must be sorted and contain no duplicates.
 |  
 |  dense
 |      A numpy array of boolean values, representing all of the bits in the SDR.
 |      This format allows random-access queries of the SDRs values.
 |      
 |      After modifying this array you MUST assign the array back into the SDR, in order
 |      to notify the SDR that its dense array has changed and its cached data is out of
 |      date.  If you did't copy this data, then SDR won't copy either.
 |  
 |  dimensions
 |      A list of dimensions of the SDR.
 |  
 |  size
 |      The total number of boolean values in the SDR.
 |  
 |  sparse
 |      A numpy array containing the indices of only the true values in the SDR.
 |      These are indices into the flattened SDR. This format allows for quickly
 |      accessing all of the true bits in the SDR.
 |      
 |      Sparse data must contain no duplicates.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pybind11_builtins.pybind11_object:
 |  
 |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
 |      Create and return a new object.  See help(type) for accurate signature.
